<template>
    {% import PageContent from '../../../PageContent.sht' %}
    {% import ErrorsPanel from '../../../ErrorsPanel.sht' %}
    {% import BreadCrumb from '../../../BreadCrumb.sfc' %}
    {% import CommandOutput from './CommandOutput.sht' %}

    <PageContent dataLoaded={{dataLoaded}}>
        {% block 'breadcrumbs' %}
            <BreadCrumb
                project={{project}}
                chain={{chain}}
                currentPage="Run chain"/>
        {% endblock %}
        {% block 'content' %}
            <ErrorsPanel errors={{errors}}/>
            <button
                class="run-project-chain"
                :onclick={{runProjectChain}}
                :disabled={{dataSaving}}
            >
                <span>Run</span>
            </button>
            <CommandOutput output={{commandOutput}}/>
        {% endblock %}
    </PageContent>
</template>

<script>
    import LoadChainMixin from '../../../../mixins/load-chain';

    function ChainRunPage( options, update, didMount, onRemove ) {
        const dataSaving = ref();
        const errors = ref();
        const commandOutput = ref();

        /** @type Socket */
        const socket = this.DI.resolve( 'socket' );

        const state = options( {
            [ dataSaving ]: false,
            [ errors ]: [],
            [ commandOutput ]: '',
            [ ref( 'runProjectChain' ) ]: () => {
                update( {
                    [ commandOutput ]: '',
                    [ dataSaving ]: true,
                    [ errors ]: []
                } );
                socket.removeWatcher( updateCommandOutput );
                socket.connect().then( runProject );
            }
        } );

        const updateCommandOutput = () => ( output ) => {
            update( {
                [ commandOutput ]: `${state[ commandOutput ]}\n${output}`
            } );
        };

        const runProject = () => {
            const chainId = state[ ref( 'chain' ) ].id;
            socket.watch( chainId, updateCommandOutput );
            this.DI.resolve( 'store' ).runProjectChain( chainId ).then(
                () => {
                    update( {
                        [ ref( 'dataLoaded' ) ]: false,
                        [ dataSaving ]: false
                    } );
                    this[ ref( '_loadPageData' ) ]();
                },
                () => update( {
                    [ errors ]: [ 'Run project chain fail!' ],
                    [ dataSaving ]: false
                } )
            );
        };

        onRemove( () => socket.removeWatcher( updateCommandOutput ) );
    }

    export default Component( Template, LoadChainMixin, ChainRunPage );
</script>
